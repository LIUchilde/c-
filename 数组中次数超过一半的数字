//解法一：排序取中位数
//时间O(nlogn)，空间O(1)
/*
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        return nums[nums.size()/2];
    }
};
*/
//解法二：建立哈希表
//时间O(n)，空间O(n/2)
/*
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int>Hash;
        int res = 0,size = nums.size();
        for(int i = 0;i<size;i++){
            Hash[nums[i]]++;
            if(Hash[nums[i]]>size/2){
                res = nums[i];
            }
        }
        return res;
    }
};
*/
//解法三：摩尔投票法
//也可以理解成混战极限一换一，不同的两者一旦遇见就同归于尽，最后活下来的值都是相同的，即要求的结果
//时间O(n)，空间O(1)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int res = 0, count = 0;
        for(int i = 0; i < nums.size(); i++){
            if(count == 0){
                res = nums[i];
                count++;
            }
            else
                res==nums[i] ? count++:count--;
        }
        return res;
    }
};
